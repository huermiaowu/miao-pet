// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: pet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pet_Ping_FullMethodName      = "/pet.pet/Ping"
	Pet_AddPet_FullMethodName    = "/pet.pet/AddPet"
	Pet_GetPet_FullMethodName    = "/pet.pet/GetPet"
	Pet_UpdatePet_FullMethodName = "/pet.pet/UpdatePet"
)

// PetClient is the client API for Pet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	AddPet(ctx context.Context, in *AddPetReq, opts ...grpc.CallOption) (*AddPetResp, error)
	GetPet(ctx context.Context, in *GetPetReq, opts ...grpc.CallOption) (*GetPetResp, error)
	UpdatePet(ctx context.Context, in *UpdatePetReq, opts ...grpc.CallOption) (*UpdatePetResp, error)
}

type petClient struct {
	cc grpc.ClientConnInterface
}

func NewPetClient(cc grpc.ClientConnInterface) PetClient {
	return &petClient{cc}
}

func (c *petClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, Pet_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClient) AddPet(ctx context.Context, in *AddPetReq, opts ...grpc.CallOption) (*AddPetResp, error) {
	out := new(AddPetResp)
	err := c.cc.Invoke(ctx, Pet_AddPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClient) GetPet(ctx context.Context, in *GetPetReq, opts ...grpc.CallOption) (*GetPetResp, error) {
	out := new(GetPetResp)
	err := c.cc.Invoke(ctx, Pet_GetPet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petClient) UpdatePet(ctx context.Context, in *UpdatePetReq, opts ...grpc.CallOption) (*UpdatePetResp, error) {
	out := new(UpdatePetResp)
	err := c.cc.Invoke(ctx, Pet_UpdatePet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetServer is the server API for Pet service.
// All implementations must embed UnimplementedPetServer
// for forward compatibility
type PetServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	AddPet(context.Context, *AddPetReq) (*AddPetResp, error)
	GetPet(context.Context, *GetPetReq) (*GetPetResp, error)
	UpdatePet(context.Context, *UpdatePetReq) (*UpdatePetResp, error)
	mustEmbedUnimplementedPetServer()
}

// UnimplementedPetServer must be embedded to have forward compatible implementations.
type UnimplementedPetServer struct {
}

func (UnimplementedPetServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPetServer) AddPet(context.Context, *AddPetReq) (*AddPetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPet not implemented")
}
func (UnimplementedPetServer) GetPet(context.Context, *GetPetReq) (*GetPetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPet not implemented")
}
func (UnimplementedPetServer) UpdatePet(context.Context, *UpdatePetReq) (*UpdatePetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePet not implemented")
}
func (UnimplementedPetServer) mustEmbedUnimplementedPetServer() {}

// UnsafePetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetServer will
// result in compilation errors.
type UnsafePetServer interface {
	mustEmbedUnimplementedPetServer()
}

func RegisterPetServer(s grpc.ServiceRegistrar, srv PetServer) {
	s.RegisterService(&Pet_ServiceDesc, srv)
}

func _Pet_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pet_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pet_AddPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServer).AddPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pet_AddPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServer).AddPet(ctx, req.(*AddPetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pet_GetPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServer).GetPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pet_GetPet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServer).GetPet(ctx, req.(*GetPetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pet_UpdatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServer).UpdatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pet_UpdatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServer).UpdatePet(ctx, req.(*UpdatePetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pet_ServiceDesc is the grpc.ServiceDesc for Pet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pet.pet",
	HandlerType: (*PetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pet_Ping_Handler,
		},
		{
			MethodName: "AddPet",
			Handler:    _Pet_AddPet_Handler,
		},
		{
			MethodName: "GetPet",
			Handler:    _Pet_GetPet_Handler,
		},
		{
			MethodName: "UpdatePet",
			Handler:    _Pet_UpdatePet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pet.proto",
}
